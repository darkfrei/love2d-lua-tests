roadColor = {118/255, 118/255, 118/255}
lineColor = {255/255, 255/255, 255/255}

bridgeRoadColor = {120/255, 120/255, 165/255,0.9}
bridgeLineColor = {255/255, 255/255, 70/255}



bckGrColor = {89/255, 157/255, 220/255}
buildingColor = {249/255, 197/255, 152/255}

return {

	
	-- generator
	"R 1 M 920,-40 V 40 M 1000,1000 V 920 M -40,600 H 40" ,
	
	-- terminator
	"R 1 M 1000,40 V -40 M 920,920 V 1000 M 40,360 H -40",
	
	-- buildings
--	"F M 0,960 V 680 C 120,680 360,800 360,960 M 0,0 V 280 C 120,280 360,160 360,0 M 1920,960 V 600 C 1560,600 1080,800 1080,960 M 1920,0 V 360 C 1560,360 1080,160 1080,0",
--	"F M 160,480 C 160,360 240,280 360,280 C 360,400 440,480 560,480 C 560,600 480,680 360,680 C 240,680 160,600 160,480",
	"F M 0,960 V 680 H 120 L 360,840 V 960 M 0,0 V 280 H 120 L 360,120 V 0 M 1920,960 V 600 H 1560 L 1080,880 V 960 M 1920,0 V 360 H 1560 L 1080,80 V 0 M 160,480 L 200,320 L 360,280 L 520,320 L 560,480 L 520,640 L 360,680 L 200,640 L 160,480",
	
	-- railroads
	"RR 1 M 600,480 C 592.30337,734.5577 501.42144,898.57869 360,1040 L 320,1080 M 360,1120 L 400,1079.8025 C 542.69409,939.06826 705.44044,847.6948 960,840 M 960,120 C 705.4438,112.30479 541.42133,21.42135 400,-120 L 360,-160 M 320,-120 L 360,-80 C 501.42137,61.42136 592.3067,225.44186 600.0015,480.00148 M 1214.5602,734.55709 C 1400,560 1680,520 1880,520 H 1960 M 1960,440 L 1880,440 C 1680,440 1400,400 1214.5581,225.44021 M 600,480 C 600,680 760,840 960,840 C 1040,840 1151.1373,800 1214.5602,734.55709 C 1355.981,593.13514 1355.98,366 1214.5581,225.44021 C 1144.3299,155.21259 1040,120 960,120 C 760,120 600,280 600,480 Z",
	
--	roads
--	"R 1 M 840,680 H 1080 M 1240,480 C 1240,400 1160,400 1120,400 M 1120,400 C 1080,400 1000,400 1000,320 M 920,320 C 920,400 1000,480 1039.4604,519.69496 M 1040,520 C 1120,600 1240,560 1240,480 M 680,480 C 680,560 760,560 800,560 M 800,560 C 840,560 919.99997,560 920,640 M 960,200 C 800,200 680,320 680,480 M 1000,640 C 1000,560 920,480 880,440 M 880,440 C 800,360 680,400 680,480 M 1080,680 C 1200,680 1240,560 1240,480 M 680,480 C 680,640 800,760 960,759.99997 M 1240,480 C 1240,320 1120,200 960,200 M 960,759.99997 C 1120,760 1240,640 1240,480 M 520,280 C 480,280 440,240 360,240 M 360,720 C 440,720 479.5,680.75 520,680 M 360,240 C 200,240 160,360 40,360 M 40,600 C 160,600 200,720 360,720 M 1080,280 840,280 M 1240,480 C 1240,400 1200,280 1080,280",
	"R 1 M 840,680 H 1080 M 1240,480 C 1240,400 1160,400 1120,400 M 1120,400 C 1080,400 1000,400 1000,320 M 920,320 C 920,400 1001,480 1040,520 M 1040,520 C 1120,600 1240,560 1240,480 M 680,480 C 680,560 760,560 800,560 M 800,560 C 840,560 920,560 920,640 M 960,200 C 800,200 680,320 680,480 M 1000,640 C 1000,560 920,480 880,440 M 880,440 C 800,360 680,400 680,480 M 1080,680 C 1200,680 1240,560 1240,480 M 680,480 C 680,640 800,760 960,760 M 1240,480 C 1240,320 1120,200 960,200 M 960,760 C 1120,760 1240,640 1240,480 M 520,280 C 480,280 440,240 360,240 M 360,720 C 440,720 480,681 520,680 M 360,240 C 200,240 160,360 40,360 M 40,600 C 160,600 200,720 360,720 M 1080,280 H 840 M 1240,480 C 1240,400 1200,280 1080,280",

--	 bridges
	"R 2 M 1000,320 V 40 M 920,40 V 320 M 920,640 920,920 M 1000,920 1000,640 M 840,280 H 520 M 520,680 H 840",
	
--	test
--	"F M 0,400 H 120 V 560 H 0",
	"F M 120,560 H 0 V 400 M 0,400 H 120 V 560",
}

--[[

local obj = 
{
	controlPoints = {
		{5,0, 5,3, 7,5, 10,5},
		{10,5, 10,8, 8,10, 5,10},
		{5,10, 2,10, 0,8, 0,5},
		{0,5, 0,2, 2,0, 5,0},
	}
}

obj.curves = {}
for i, vertices in ipairs (obj.controlPoints) do
	local bezierCurve = love.math.newBezierCurve (vertices)
	local curve = bezierCurve:render ()
	table.insert (obj.curves, curve)
end

obj.polyline = {}
for i, vertices in ipairs (obj.curves) do
	for j = 1, #vertices-1, 2 do
		local x, y = vertices[j], vertices[j+1]
		local n = #obj.polyline
		if n > 0 then
			local x2, y2 = obj.polyline[n-1], obj.polyline[n]
			if not (x == x2 and y == y2) then
				table.insert (obj.polyline, x)
				table.insert (obj.polyline, y)
			end
		end
	end
end
local n = #obj.polyline
if (obj.polyline[1] == obj.polyline[n-1]) and (obj.polyline[2] == obj.polyline[n]) then
	table.remove(obj.polyline, n)
	table.remove(obj.polyline, n-1)
end
]]