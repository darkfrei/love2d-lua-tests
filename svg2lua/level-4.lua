roadColor = {118/255, 118/255, 118/255}
lineColor = {255/255, 255/255, 255/255}

bridgeRoadColor = {120/255, 120/255, 165/255,0.9}
bridgeLineColor = {255/255, 255/255, 70/255}



bckGrColor = {89/255, 157/255, 220/255}
buildingColor = {200/255, 255/255, 172/255}

return {

	
	-- generator / green
	"R 1 M 480,-40 L 560,40 M 1960,120 L 1881,142 M 1960,840 L 1878,836 M 600,1000 L 680,920 M -40,680 L 40,640" ,
	
	-- terminator / cyan
	"R 1 M 640,40 L 560,-40 M 1879,216 L 1960,200 M 1879,913 L 1960,920 M 600,920 L 520,1000 M 40,560 L -40,600",
	
	-- buildings
	"F M 0,0 V 360 H 440 L 560,240 V 120 L 440,0 M 0,960 V 800 L 120,680 H 480 L 600,800 L 440,960 M 1040,80 L 1160,200 H 1560 L 1680,80 M 720,0 L 800,80 H 1920 V 0 M 1920,400 H 1680 L 1800,280 H 1920 M 1920,760 H 1440 L 1320,640 V 520 L 1440,400 H 1920 M 760,960 L 840,880 H 1400 L 1440,920 H 1560 L 1600,960 M 960,880 L 1000,840 H 1240 L 1280,880 M 720,360 H 960 L 1080,480 V 520 L 1000,600 H 800 L 680,480 V 400",

--	roads
--	"R 1 M 1064,345 C 1088,355 1165,436 1147,494 M 1147,494 C 1127,559 1087,600 1063,623 M 1064,345 C 1114,365 1157,390 1183,417 M 760,280 C 840,280 965,305 1064,345 M 800,640 C 760,640 600,560 600,480 M 1063,623 C 1029,654 892,693 857,663 M 520,560 C 600,560 720,680 720,720 M 40,640 C 121,599 440,560 520,560 M 463,423 C 412,479 120,520 40,560 M 680,200 C 679,297 501,388 463,423 M 800,800 C 840,800 882,810 930,802 M 930,802 C 999,791 1064,760 1120,760 M 560,40 C 600,80 680,120 680,200 M 760,120 C 720,120 680,80 640,40 M 1240,280 C 1120,280 1000,120 760,120 M 1880,147 C 1559,251 1470,276 1240,280 M 1297,417 C 1409,309 1880,217 1880,217 M 1225,511 C 1246,467 1257,457 1297,417 M 520,560 C 542,560 562,551 577,537 M 577,537 C 591,522 600,502 600,480 M 600,480 C 600,458 591,438 577,423 M 577,423 C 562,409 542,400 520,400 M 520,400 C 498,400 478,409 463,423 M 463,423 C 449,438 440,458 440,480 M 440,480 C 440,502 449,522 463,537 M 463,537 C 478,551 498,560 520,560 M 760,280 C 782,280 802,271 817,257 M 817,257 C 831,242 840,222 840,200 M 840,200 C 840,178 831,158 817,143 M 817,143 C 802,129 782,120 760,120 M 760,120 C 738,120 718,129 703,143 M 703,143 C 689,158 680,178 680,200 M 680,200 C 680,222 689,242 703,257 M 703,257 C 718,271 738,280 760,280 M 1240,440 C 1262,440 1282,431 1297,417 M 1297,417 C 1311,402 1320,382 1320,360 M 1320,360 C 1320,338 1311,318 1297,303 M 1297,303 C 1282,289 1262,280 1240,280 M 1240,280 C 1218,280 1198,289 1183,303 M 1183,303 C 1169,318 1160,338 1160,360 M 1160,360 C 1160,382 1169,402 1183,417 M 1183,417 C 1198,431 1218,440 1240,440 M 1120,760 C 1142,760 1162,751 1177,737 M 1177,737 C 1191,722 1200,702 1200,680 M 1200,680 C 1200,658 1191,638 1177,623 M 1177,623 C 1162,609 1142,600 1120,600 M 1120,600 C 1098,600 1078,609 1063,623 M 1063,623 C 1049,638 1040,658 1040,680 M 1040,680 C 1040,702 1049,722 1063,737 M 1063,737 C 1078,751 1098,760 1120,760 M 720,720 C 720,840 640,888 600,928 M 800,800 C 822,800 842,791 857,777 M 857,777 C 871,762 880,742 880,720 M 880,720 C 880,698 871,678 857,663 M 857,663 C 842,649 822,640 800,640 M 800,640 C 778,640 758,649 743,663 M 743,663 C 729,678 720,698 720,720 M 720,720 C 720,742 729,762 743,777 M 743,777 C 758,791 778,800 800,800 M 747,874 C 774,854 893,809 930,802 M 684,929 C 702,911 723,895 747,874 M 747,874 C 774,853 817,817 857,777 M 1315,757 C 1288,742 1256,692 1235,640 M 1200,680 C 1200,640 1202,560 1225,511 M 1315,757 C 1235,717 1217,663 1177,623 M 1880,840 C 1880,840 1527,835 1315,757 M 1120,760 C 1200,760 1469,880 1880,906 M 1160,360 C 1160,376 1165,435 1147,494 M 1235,640 C 1217,595 1206,548 1225,511 M 600,480 C 600,400 680,280 760,280",
--	"R 1 M 1064,345 C 1088,355 1165,436 1147,494",

	"R 1 M 1183,303 C 1169,317 1160,340 1160,360 C 1160,380 1169,403 1183,417 C 1197,431 1220,440 1240,440 C 1260,440 1283,431 1297,417 C 1311,403 1320,380 1320,360 C 1320,340 1311,317 1297,303 C 1283,289 1260,280 1240,280 C 1220,280 1197,289 1183,303 Z M 703,143 C 689,157 680,180 680,200 C 680,220 689,243 703,257 C 717,271 740,280 760,280 C 780,280 803,271 817,257 C 831,243 840,220 840,200 C 840,180 831,157 817,143 C 803,129 780,120 760,120 C 740,120 717,129 703,143 Z M 463,423 C 449,437 440,460 440,480 C 440,500 449,523 463,537 C 477,551 500,560 520,560 C 540,560 563,551 577,537 C 591,523 600,500 600,480 C 600,460 591,437 577,423 C 563,409 540,400 520,400 C 500,400 477,409 463,423 Z M 743,663 C 729,677 720,700 720,720 C 720,740 729,763 743,777 C 757,791 780,800 800,800 C 820,800 843,791 857,777 C 871,763 880,740 880,720 C 880,700 871,677 857,663 C 843,649 820,640 800,640 C 780,640 757,649 743,663 Z M 600,480 C 600,400 680,280 760,280 M 1160,360 C 1160,376 1165,435 1147,494 M 1120,760 C 1200,760 1468,887 1879,913 M 1878,836 C 1719,832 1387,790 1307,750 M 1307,750 C 1227,710 1217,663 1177,623 M 1200,680 C 1200,640 1202,560 1225,511 M 720,880 C 760,840 817,817 857,777 M 680,920 L 720,880 M 720,880 C 760,840 893,809 930,802 M 720,720 C 720,840 640,880 600,920 M 1063,623 C 1049,637 1040,660 1040,680 C 1040,700 1049,723 1063,737 C 1077,751 1100,760 1120,760 C 1140,760 1163,751 1177,737 C 1191,723 1200,700 1200,680 C 1200,660 1191,637 1177,623 C 1163,609 1140,600 1120,600 C 1100,600 1077,609 1063,623 Z M 1225,511 C 1246,467 1257,457 1297,417 M 1297,417 C 1409,309 1759,240 1879,216 M 1881,142 C 1752,178 1470,276 1240,280 M 1240,280 C 1120,280 1000,120 760,120 M 760,120 C 720,120 680,80 640,40 M 560,40 C 600,80 680,120 680,200 M 930,802 C 999,791 1064,760 1120,760 M 680,200 C 679,297 501,388 463,423 M 463,423 C 412,479 120,520 40,560 M 40,640 C 121,599 440,560 520,560 M 520,560 C 600,560 720,680 720,720 M 1063,623 C 1000,680 880,640 800,640 M 760,280 C 840,280 965,305 1064,345 M 1064,345 C 1114,365 1157,390 1183,417 M 1147,494 C 1127,559 1087,600 1063,623 M 1064,345 C 1088,355 1165,436 1147,494 M 1307,750 C 1269,731 1230,691 1216,648 C 1201,605 1206,548 1225,511 M 800,800 C 840,800 882,810 930,802 M 800,640 C 760,640 600,560 600,480",
	
}

--[[

local obj = 
{
	controlPoints = {
		{5,0, 5,3, 7,5, 10,5},
		{10,5, 10,8, 8,10, 5,10},
		{5,10, 2,10, 0,8, 0,5},
		{0,5, 0,2, 2,0, 5,0},
	}
}

obj.curves = {}
for i, vertices in ipairs (obj.controlPoints) do
	local bezierCurve = love.math.newBezierCurve (vertices)
	local curve = bezierCurve:render ()
	table.insert (obj.curves, curve)
end

obj.polyline = {}
for i, vertices in ipairs (obj.curves) do
	for j = 1, #vertices-1, 2 do
		local x, y = vertices[j], vertices[j+1]
		local n = #obj.polyline
		if n > 0 then
			local x2, y2 = obj.polyline[n-1], obj.polyline[n]
			if not (x == x2 and y == y2) then
				table.insert (obj.polyline, x)
				table.insert (obj.polyline, y)
			end
		end
	end
end
local n = #obj.polyline
if (obj.polyline[1] == obj.polyline[n-1]) and (obj.polyline[2] == obj.polyline[n]) then
	table.remove(obj.polyline, n)
	table.remove(obj.polyline, n-1)
end
]]